<!DOCTYPE html>
<meta charset="utf-8">
<link rel="stylesheet" type="text/css" href="zoomout.css" />
<style>
    .node {
        stroke: #af0;
        stroke-width: 2px;
    }
    .link {
        stroke-opacity: .6;
    }
    .cursor {
        fill: none;
        stroke: brown;
        pointer-events: none;
    }
</style>
<body>
    <div class="mod_up">
        <div id="mod_vis" class="mod">
            <div class='visualization'></div>
        </div>
        <div id="mod_spec" class="mod">
            <div class="mod_header">
                <div class="mod_ctrls">
                    <input type="button" value="Clear" onclick="javascript:eraseText();"></input>
                </div>
                <div class="mod_title"> <a id="link_spec" class="active">Content:</a>

                </div>
            </div>
            <textarea id="spec" class="areacontent" spellcheck="false"></textarea>
            <div id="replybox"></div>
            <div id="replybox2"></div>
        </div>
    </div>
    <div class="mod_down">
        <div class="mod_down_elems">
            <div class="mod_filt" style="Float:left"> <b>Threads</b> 
                <br />General:
                <input type="checkbox" checked="yes" name="filt_gen" value="general" />
                <br />Agree:
                <input type="checkbox" checked="yes" name="filt_agr" value="agree" />
                <br />Disagree:
                <input type="checkbox" checked="yes" name="filt_dis" value="disagree" />
                <br />
            </div>
            <div class="mod_filt" style="Float:left">
                </br>Question:
                <input type="checkbox" checked="yes" name="filt_que" value="question" />
                <br />Answer:
                <input type="checkbox" checked="yes" name="filt_ans" value="answer" />
                <br />Similar:
                <input type="checkbox" checked="yes" name="filt_sim" value="similar" />
                <br />
            </div>
            <div class="mod_filt_box" style="Float:left"> <b>Boxes</b> 
                <br />General:
                <input type="checkbox" checked="yes" name="filt_box_gen" value="general_box" />
                <br />Question:
                <input type="checkbox" checked="yes" name="filt_box_que" value="question_box" />
                <br />Answer:
                <input type="checkbox" checked="yes" name="filt_box_ans" value="answer_box" />
                <br />
            </div>
            <div class="mod_filt_size" style="Float:left">
  			<b>Sizes</b> 
                <br />Boxes:
                <input type="checkbox" checked="yes" name="filt_size_box" value="size_box" />
                <br />Threads:
                <input type="checkbox" checked="yes" name="filt_size_thread" value="size_thread" />
                <br />
            </div>
        </div>
    </div>
    <script src="jquery-1.9.1.js"></script>
    <script src="d3.v3.min.js"></script>
    <script>
	
        var width = 712,
            height = 325;
		
		var bordercolor = {"normal": "#af0", "clicked": "#255" , "over" : "#E9B"}; 
        var clickednodehash = "";

        var linksfilterlist = ['input[name=filt_gen]', 'input[name=filt_agr]', 'input[name=filt_dis]', 'input[name=filt_que]', 'input[name=filt_ans]', 'input[name=filt_sim]'];
        var linkstypelist = [5, 4, 1, 2, 3, 6];
        var nodesfilterlist = ['input[name=filt_box_gen]', 'input[name=filt_box_que]', 'input[name=filt_box_ans]'];
        var nodestypelist = [1, 2, 3];

        var color = d3.scale.category20();
		

        var force = d3.layout.force()
            .charge(-500)
            .linkDistance(40)
            .size([width, height])
         //.on("tick", tick);

         var svg = d3.select(".visualization").append("svg")
            .attr("width", width)
            .attr("height", height)
            .on("mousedown", mousedown)
			.on("mouseup",mouseup);

        d3.json("debate.json", function (error, graph) {
            force
                .nodes(graph.nodes)
                .links(graph.links)
                .start();
				
			//force.friction([0.3]);

            var link = svg.selectAll(".link")
                .data(graph.links)
                .enter().append("line")
                .attr("class", "link")
                .style("stroke", function (d) {return color(d.type);})
                .style("stroke-width", function (d) {
                return Math.sqrt(d.evaluation);
            });

            var node = svg.selectAll(".node")
                .data(graph.nodes)
                .enter().append("rect")
                .attr("class", "node")
                .attr("width", function (d) {return 20 * Math.sqrt(Math.sqrt(d.evaluation));})
                .attr("height", function (d) {return 20 * Math.sqrt(Math.sqrt(d.evaluation));})
                .style("fill", function (d) {return color(d.type);})
                .on("mouseover", mouseover)
                .on("mouseout", mouseout)
                .on("click", click)
				.on('mousedown.drag', null)
                .call(force.drag);

			svg.selectAll(".node")
				.on('mousedown.drag', null);
				
            node.append("title")
                .text(function (d) {
                return d.content;
            });


            force.on("tick", function () {
                var node = svg.selectAll(".node"),
                    link = svg.selectAll(".link");

                link.attr("x1", function (d) {return d.source.x + 10;})
                    .attr("y1", function (d) {return d.source.y + 10;})
                    .attr("x2", function (d) {return d.target.x + 10;})
                    .attr("y2", function (d) {return d.target.y + 10;});

                node.attr("x", function (d) {return d.x;})
                    .attr("y", function (d) {return d.y;});
            });
        });

        function eraseText() {
            document.getElementById("spec").value = "";
        }

        function mouseover(d) {
            if (clickednodehash === "") {
                svg.selectAll(".node")
                    .style("stroke-width", function (d) {return "2px";})
                    .style("stroke", bordercolor.normal);
					
				d3.select(this)
//					.transition().duration(250)
					.style("stroke-width", function (d) {return "2px";})
                    .style("stroke", bordercolor.over);

                document.getElementById("spec").value = d.content;
            }
        }

        function mouseout() {}

		function mouseup(){}
		
        function mousedown() {
			
			svg.selectAll(".node")
                .style("stroke", bordercolor.normal);
				
			clickednodehash = "";
			
			document.getElementById("spec").value = "";
			document.getElementById("spec2").value = "";
			$('#replybox2').html(" ");
        }

        function restart() {

            var nodes = force.nodes();
            var links = force.links();

            var link = svg.selectAll(".link")
                .data(links)
                .enter().append("line")
                .attr("class", "link")
				.style("stroke", function (d) {return color(d.type);})
                .style("stroke-width", function (d) {return 2;});

            var node = svg.selectAll(".node")
                .data(nodes)
                .enter().append("rect")
                .attr("class", "node")
                .attr("width", function (d) {return 20;})
                .attr("height", function (d) {return 20;})
                .style("fill", function (d) {return color(d.type);})
                .attr("x", function (d) {return d.x;})
                .attr("y", function (d) {return d.y;})
                .on("mouseover", mouseover)
                .on("mouseout", mouseout)
                .on("click", click)
                .call(force.drag);
				
			d3.selectAll(".node")
				.on('mousedown.drag', null);

            force.start();
        }

        linksfilterlist.forEach(function (d, i) {
            $(d).click(function () {
                linkscheckclick(this, i)
            })
        })

        function linkscheckclick(check, i) {
            if (!$(check).is(':checked')) {
                svg.selectAll(".link")
                    .filter(function (d) {
                    return d.type == linkstypelist[i];
                })
                    .style("stroke-width", function (d) {
                    return 0;
                });
            } else {
                svg.selectAll(".link")
                    .filter(function (d) {
                    return d.type == linkstypelist[i];
                })
                    .style("stroke-width", function (d) {
                    return Math.sqrt(d.evaluation);
                });
            }
        }

        nodesfilterlist.forEach(function (d, i) {
            $(d).click(function () {
                nodescheckclick(this, i)
            })
        })

        function nodescheckclick(box, i) {
            if (!$(box).is(':checked')) {
                hideboxes(i);
            } else {
                showboxes(i);
            }
        }

        function hideboxes(i) {
            svg.selectAll(".node")
                .filter(function (d) {
                return d.type == nodestypelist[i];
            })
                .style("stroke-width", function (d) {
                return "0px";
            })
                .style("fill-opacity", function (d) {
                hidelinks(d.hash);
                return "0";
            });
        }

        function showboxes(i) {
            svg.selectAll(".node")
                .filter(function (d) {
                return d.type == nodestypelist[i];
            })
                .style("stroke-width", function (d) {
                return "2px";
            })
                .style("fill-opacity", function (d) {
                showlinks(d.hash);
                return "1";
            });
        }

        function hidelinks(i) {
            svg.selectAll(".link")
                .filter(function (d) {
                return d.ssource == i;
            })
                .style("stroke-width", function (d) {
                return 0;
            });
        }

        function showlinks(i) {
            svg.selectAll(".link")
                .filter(function (d) {
                return d.ssource == i;
            })
                .style("stroke-width", function (d) {
                return Math.sqrt(d.evaluation);
            });
        }


        $('input[name=filt_size_box]').click(function () {
            if (!$(this).is(':checked')) {
                svg.selectAll(".node")
                    .attr("width", function (d) {
                    return "20";
                });
                svg.selectAll(".node")
                    .attr("height", function (d) {
                    return "20";
                });
            } else {
                svg.selectAll(".node")
                    .attr("width", function (d) {
                    return 20 * Math.sqrt(Math.sqrt(d.evaluation));
                })
                    .attr("height", function (d) {
                    return 20 * Math.sqrt(Math.sqrt(d.evaluation));
                });
            }
        });

        $('input[name=filt_size_thread]').click(function () {
            if (!$(this).is(':checked')) {
                svg.selectAll(".link")
                    .style("stroke-width", function (d) {
                    return Math.sqrt(6);
                });
            } else {
                svg.selectAll(".link")
                    .style("stroke-width", function (d) {
                    return Math.sqrt(d.evaluation);
                });
            }
        });

        function click(d) {
			
			svg.selectAll(".node")
                .filter(function (d) {return d.hash == clickednodehash;})
                .style("stroke", bordercolor.normal);
			
			d3.select(this)
                .style("stroke", bordercolor.clicked);
			
			clickednodehash = d.hash;

			document.getElementById("spec").value = d.content;
			
            $('#replybox2').html("Box type: <select id=\"replynodetype\"> <option value=1>General</option><option value=2>Question</option><option value=3>Answer</option> <option value=4>Opinion</option><option value=5>Proposal</option><option value=6>Info</option></select>    Thread: <select id=\"replylinktype\"> <option value=5>General</option><option value=4>Agree</option><option value=1>Disagree</option> <option value=2>Question</option><option value=3>Answer</option><option value=6>Similar</option></select><br><textarea id='spec2' class='areareply' spellcheck='false'></textarea><div class='save' onClick='save()'>Save</div>");
        }

        function save() {
			createnode();
			//+ call to export fuctions
        }
		
		function createnode(){
		    
			var nodes = force.nodes();
            var links = force.links();

            var content = document.getElementById("spec2").value;
			var nodetype = document.getElementById("replynodetype").value;
			var linktype = document.getElementById("replylinktype").value;
			
			var targetindex = searchhash(nodes, clickednodehash), 
				targetnode = nodes[targetindex];
				
            var newnode = {
                x: targetnode.x,
                y: targetnode.y,
                "hash": nodes.length + 2,
                "content": content,
                "evaluation": 1,
                "type": nodetype,
                "author": "Mike",
                "time": "17-abr-2013"
            };
			
            nodes.push(newnode);
            links.push({source: newnode, target: targetnode,"type":linktype});

            restart();
		}
		
		function searchhash(elements, objective){
			for (i=0;i<elements.length;i++){
				if (elements[i].hash == objective){return i;}
			};
		}
		
    </script>
</body>

</html>
